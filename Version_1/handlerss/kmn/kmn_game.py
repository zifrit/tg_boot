import random

import requests

from Version_1.keyboards import inlinekeyboard
from Version_1.main import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from Version_1.keyboards import keyboard
from .states import Register

users = {}
players = {}
play = False
# BASE_URL = 'http://127.0.0.1:8000/kmn' #–±–µ–∑ –¥–æ–∫–µ—Ä–∞
BASE_URL = 'http://dj_app:8000/kmn' #—Å –¥–æ–∫–µ—Ä–æ–º


@dp.message_handler(commands=['start_kmn'])
async def game(message: Message):
    await message.answer(text='–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã.\n'
                              '–ò –û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:\n'
                              '–∫ - –∫–∞–º–µ–Ω—å\n'
                              '–Ω - –Ω–æ–∂–Ω–∏—Ü—ã\n'
                              '–± - –±—É–º–∞–≥–∞\n'
                              '–®–∞–±–ª–æ–Ω: \n "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã" "–≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –æ—Ç–≤–µ—Ç"\n'
                              '–ü—Ä–∏–º–µ—Ä: \n —á–µ—Ä–Ω–∞—è-–∫–æ–º–Ω–∞—Ç–∞ –∫\n'
                              '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º\n')
    await Register.game_name.set()


@dp.message_handler(state=Register.game_name)
async def name_game(message: Message, state: FSMContext):
    answer = message.text.split()
    if len(answer) == 1:
        await message.reply(text='–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞ \n'
                                 '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Å–≤–µ—Ä–∏–≤—à–∏—Å—å —Å —à–∞–±–ª–æ–Ω–æ–º')
    else:
        await state.update_data(game_name=answer[0])
        st = await state.get_data('game_name')
        requests_tg = {
            'user': message.from_user.id,
            'answer': answer[1],
            'game_name': st['game_name']
        }
        response = requests.post(f'{BASE_URL}/start/', json=requests_tg)
        if response.json()['status']:
            await message.reply(text=response.json()['message'])
            await state.finish()
        else:
            await message.reply(text=response.json()['message'])
            await message.answer(text='–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ')
            await state.finish()


@dp.message_handler(commands=['join_kmn'])
async def choice_room(message: Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã.\n')
    await Register.join_in_game.set()


@dp.message_handler(state=Register.join_in_game)
async def join_game(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(join_in_game=answer)
    st = await state.get_data('join_in_game')
    requests_tg = {
        'user': message.from_user.id,
        'room_name': st['join_in_game']
    }
    response = requests.get(f'{BASE_URL}/search_join/', json=requests_tg)
    if response.json()['message'] == '–í—ã —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ':
        await message.reply(text=response.json()['message'])
        await message.answer(text='–û–∂–∏–¥–∞–π—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã')
        await state.finish()
    elif response.json()['message'] == '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ':
        await message.reply(text=response.json()['message'])
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞: \n'
                                  '–∫ - –∫–∞–º–µ–Ω—å\n'
                                  '–Ω - –Ω–æ–∂–Ω–∏—Ü—ã\n'
                                  '–± - –±—É–º–∞–≥–∞\n')
        await Register.answer.set()

    elif not response.json()['status']:
        await message.reply(text=response.json()['message'])
        await message.answer(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ /join_game')
        await state.finish()


@dp.message_handler(state=Register.answer)
async def join_game(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer=answer)
    st_1 = await state.get_data('answer')
    st_2 = await state.get_data('join_in_game')
    requests_tg = {
        'user': message.from_user.id,
        'room_name': st_2['join_in_game'],
        'answer': st_1['answer']
    }
    response = requests.post(f'{BASE_URL}/search_join/', json=requests_tg)
    if response.json()['status']:
        await message.reply(text=response.json()['message'])
        await state.finish()
        for otvet in response.json()['notification']:
            await bot.send_message(chat_id=otvet[0], text=otvet[1])

    else:
        await message.reply(text=response.json()['message'])
        await message.answer(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ /join_game')
        await state.finish()


@dp.message_handler(commands=['end_kmn'])
async def choice_room(message: Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã.\n')
    await Register.end_game.set()


@dp.message_handler(state=Register.end_game)
async def end_game(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(end_game=answer)
    st = await state.get_data('end_game')
    requests_tg = {
        'user': message.from_user.id,
        'room_name': st['end_game']
    }
    response = requests.post(f'{BASE_URL}/end_game/', json=requests_tg)
    if response.json()['status'] == 'D':
        for otvet in response.json()['message']:
            await bot.send_message(chat_id=otvet[0], text=f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–∏–ª–∞—Å—å. \n'
                                                          f'–í –∫–æ–º–Ω–∞—Ç–µ {st["end_game"]} —É –≤–∞—Å {otvet[1]}')
        requests.delete(f'{BASE_URL}/list_games/{response.json()["room_id"]}')
        await state.finish()
    elif response.json()['status']:
        for otvet in response.json()['message']:
            await bot.send_message(chat_id=otvet[0], text=f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–∏–ª–∞—Å—å. \n'
                                                          f'–í –∫–æ–º–Ω–∞—Ç–µ {st["end_game"]} –≤—ã {otvet[1]}')
        requests.delete(f'{BASE_URL}/list_games/{response.json()["room_id"]}')
        await state.finish()
    else:
        await message.reply(text=response.json()['message'])
        await state.finish()


previous_page: str = ''
next_page: str = ''


async def get_page_data(action: str):
    global previous_page, next_page
    if action == 'previous':
        response = requests.get(previous_page).json()
        list_games = '\n'.join(
            [
                f'{number}) {game["administrator"]} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É {game["game_name"]} ' for number, game in
                enumerate(response['results'], 1)
            ])
        next_page = response['next'] if response['next'] else ''
        previous_page = response['previous'] if response['previous'] else ''
        return list_games, inlinekeyboard.list_exist_game if response['previous'] else inlinekeyboard.next_game
    elif action == 'next':
        response = requests.get(next_page).json()
        list_games = '\n'.join(
            [
                f'{number}) {game["administrator"]} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É {game["game_name"]} ' for number, game in
                enumerate(response['results'], 1)
            ])
        next_page = response['next'] if response['next'] else ''
        previous_page = response['previous'] if response['previous'] else ''
        return list_games, inlinekeyboard.list_exist_game if response['next'] else inlinekeyboard.previous_game


@dp.message_handler(commands=['list_kmn'])
async def back(message: Message):
    response = requests.get(f'{BASE_URL}/games/').json()
    if response['count'] > 4:
        global next_page
        next_page = response['next']
        print(next_page)
        list_games = '\n'.join(
            [
                f'{number}) {game["administrator"]} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É {game["game_name"]} ' for number, game in
                enumerate(response['results'], 1)
            ])
        await message.answer(text=f'<b>–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:</b> \n{list_games}',
                             reply_markup=inlinekeyboard.next_game)
    else:
        list_games = '\n'.join(
            [
                f'{number}) {game["administrator"]} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É {game["game_name"]} ' for number, game in
                enumerate(response['results'], 1)
            ])
        await message.answer(text=f'<b>–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:</b> \n{list_games}')


@dp.callback_query_handler(lambda call: call.data in ['previous', 'next'])
async def previous_list(call: CallbackQuery):
    list_games, inline = await get_page_data(call.data)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f'‚úçÔ∏è<b>–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:</b> \n {list_games}',
                                reply_markup=inline)


@dp.message_handler(commands=['back'])
async def back(message: Message):
    await message.answer(text='üîÑ', reply_markup=keyboard.kb_menu)


@dp.message_handler(commands=['manual_kmn'])
async def back(message: Message):
    await message.answer(text='–ü—Ä–∞–≤–∏–ª–∞: \n'
                              '–ò–≥—Ä—É –º–æ–∂–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª. \n'
                              '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ: 2. \n'
                              '\n\n\n'
                              '<b> üïπ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: </b>\n'
                              'üëâ /start_kmn - –∑–∞–ø—É—Å–∫–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞ \n'
                              'üëâ /join_kmn - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ \n'
                              'üëâ /end_kmn -  –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ \n'
                              'üëâ /list_kmn - —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç —Å –∏–≥—Ä–æ–π \n')
